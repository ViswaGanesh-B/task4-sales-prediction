import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

def load_data(file_path):
    """Load and prepare the dataset."""
    data = pd.read_csv(file_path)
    data.fillna(data.mean(), inplace=True)
    return data

def prepare_data(data):
    """Prepare features and target variable."""
    features = ['TV', 'Radio', 'Newspaper']
    X = data[features]
    y = data['Sales']
    return X, y

def train_model(X_train, y_train):
    """Train the Linear Regression model."""
    model = LinearRegression()
    model.fit(X_train, y_train)
    return model

def evaluate_model(model, X_test, y_test):
    """Evaluate the model and print metrics."""
    y_pred = model.predict(X_test)
    print("Model Evaluation Metrics:")
    print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred):.2f}")
    print(f"Mean Absolute Error: {mean_absolute_error(y_test, y_pred):.2f}")
    print(f"R^2 Score: {r2_score(y_test, y_pred):.2f}")

def predict_sales(model):
    """Take user input and make sales prediction."""
    try:
        print("\nEnter the advertising spend to predict sales:")
        tv_spend = float(input("Enter TV Advertising Spend: "))
        radio_spend = float(input("Enter Radio Advertising Spend: "))
        newspaper_spend = float(input("Enter Newspaper Advertising Spend: "))

        input_data = pd.DataFrame({
            'TV': [tv_spend],
            'Radio': [radio_spend],
            'Newspaper': [newspaper_spend]
        })
        
        predicted_sales = model.predict(input_data)
        print(f"\nThe predicted sales for the input data is: ${predicted_sales[0]:.2f}")
    
    except ValueError:
        print("Invalid input. Please enter numeric values.")

def main(filename):
    """Main function to run the script."""
    # Load and prepare data
    data = load_data(filename)
    X, y = prepare_data(data)
    
    # Split data into training and test sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Train the model
    model = train_model(X_train, y_train)
    
    # Evaluate the model
    evaluate_model(model, X_test, y_test)
    
    # Make a prediction
    predict_sales(model)

# Run the main function with the specified filename
if _name_ == "_main_":
    # Change the filename here if needed
    main('advertising.csv')
